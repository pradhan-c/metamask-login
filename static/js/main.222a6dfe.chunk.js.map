{"version":3,"sources":["components/UI/Card/Card.module.css","components/Home/Home.module.css","components/UI/Card/Card.js","components/Home/Home.js","components/Login/Login.js","App.js","reportWebVitals.js","index.js","components/Login/Login.module.css"],"names":["module","exports","Card","props","className","classes","card","children","Home","home","currentAccount","currentNetwork","Login","useState","isConnecting","setIsConnecting","window","ethereum","provider","setProvider","isMetaMaskInstalled","setIsMetaMaskInstalled","useEffect","detectProvider","console","error","web3","currentProvider","warn","onLoginHandler","a","request","method","onLogin","login","onClick","button","type","href","App","isConnected","setIsConnected","setCurrentAccount","chainId","setChainId","setWeb3","NetworkIds","Web3","eth","getAccounts","accounts","getChainId","length","log","handleAccountsChanged","onLogout","handleChainChanged","web3ChainId","on","removeListener","getCurrentNetwork","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.222a6dfe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3wOeL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__gsqFq\"};","import classes from \"./Card.module.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className={`${classes.card} ${props.className}`}>{props.children}</div>\r\n  );\r\n};\r\n\r\nexport default Card;","import Card from \"../UI/Card/Card\";\r\nimport classes from \"./Home.module.css\";\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <Card className={classes.home}>\r\n      <h1>You are logged in</h1>\r\n      <p>{props.currentAccount}</p>\r\n      \r\n      <p>Network : {props.currentNetwork}</p>\r\n    </Card>\r\n  );\r\n};\r\nexport default Home;","import { useState , useEffect} from \"react\";\r\nimport Card from \"../UI/Card/Card\";\r\nimport classes from \"./Login.module.css\";\r\n\r\nfunction Login(props) {\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [provider ,setProvider] = useState(window.ethereum);\r\n  const [isMetaMaskInstalled,setIsMetaMaskInstalled] =useState(false);\r\n\r\n  useEffect(() =>{\r\n      setProvider(detectProvider());\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    if (provider) {\r\n        if (provider !== window.ethereum) {\r\n          console.error(\r\n            \"Not window.ethereum provider. Do you have multiple wallet installed ?\"\r\n          );\r\n        }\r\n        setIsMetaMaskInstalled(true);\r\n    }\r\n  },[provider])\r\n\r\n  const detectProvider = () => {\r\n    let provider;\r\n    if (window.ethereum) {\r\n      provider = window.ethereum;\r\n    } else if (window.web3) {\r\n      provider = window.web3.currentProvider;\r\n    } else {\r\n      console.warn(\"No Ethereum browser detected! Check out MetaMask\");\r\n    }\r\n    return provider;\r\n  };\r\n\r\n  const onLoginHandler = async () => {\r\n    const provider = detectProvider();\r\n    if (provider) {\r\n      if (provider !== window.ethereum) {\r\n        console.error(\r\n          \"Not window.ethereum provider. Do you have multiple wallet installed ?\"\r\n        );\r\n      }\r\n      setIsConnecting(true);\r\n      await provider.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      setIsConnecting(false);\r\n    }\r\n    props.onLogin(provider);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.login}>\r\n        {isMetaMaskInstalled &&\r\n            <button onClick={onLoginHandler} className={classes.button} type=\"button\">\r\n        {!isConnecting && \"Log In\"}\r\n        {isConnecting && \"Loading...\"}\r\n      </button>}\r\n      {!isMetaMaskInstalled &&\r\n      <p>\r\n          <a href=\"/\">Install Metamask</a>\r\n      </p>\r\n      } \r\n      \r\n      \r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Login;","import { useState , useEffect } from \"react\";\nimport Home from \"./components/Home/Home\";\nimport Login from \"./components/Login/Login\";\nimport Web3 from \"web3\";\n\nconst App = () => {\n  //Hooks\n  const [isConnected, setIsConnected] = useState(false);\n  const [currentAccount, setCurrentAccount] = useState(null);\n \n  const [chainId,setChainId] =useState(null);\n  const [provider ,setProvider] = useState(window.ethereum);\n  const [web3,setWeb3]=useState(null);\n\n  const NetworkIds = {\n    1: \"Ethereum Main Network\",\n    3: \"Ropsten Test Network\",\n    4: \"Rinkeby Test Network\",\n    5: \"Goerli Test Network\",\n    42: \"Kovan Test Network\",\n  };\n\n  const onLogin = async (provider) => {\n    const web3 = new Web3(provider);\n    const accounts = await web3.eth.getAccounts();\n    const chainId = await web3.eth.getChainId();\n    if (accounts.length === 0) {\n      console.log(\"Please connect to MetaMask!\");\n    } else if (accounts[0] !== currentAccount) {\n      setProvider(provider);\n      setWeb3(web3);\n      setChainId(chainId);\n      setCurrentAccount(accounts[0]);\n      setIsConnected(true);\n    \n\n     \n      \n    }\n  };\n\n  useEffect(() => {\n    const handleAccountsChanged = async (accounts) => {\n      \n      if (accounts.length === 0) {\n        onLogout();\n      } else if (accounts[0] !== currentAccount) {\n        setCurrentAccount(accounts[0]);\n        \n  \n        \n      }\n    };\n\n    const handleChainChanged = async (chainId) => {\n      const web3ChainId = await web3.eth.getChainId();\n      setChainId(web3ChainId);\n    };\n     if(isConnected){\n       provider.on(\"accountsChanged\",handleAccountsChanged);\n       provider.on(\"chainChanged\",handleChainChanged);\n     }\n  \n\n  return () => {\n    if (isConnected) {\n      provider.removeListener(\"accountsChanged\", handleAccountsChanged);\n      provider.removeListener(\"chainChanged\", handleChainChanged);\n    }\n  };\n}, [isConnected]);\n\n  const onLogout = () => {\n    setIsConnected(false);\n    setCurrentAccount( null);\n  };\n\n  const getCurrentNetwork = (chainId) => {\n    return NetworkIds[chainId];\n  };\n\n  return (\n    <div>\n      <header className=\"main-header\">\n        <h1>Metamask Login</h1>\n        <nav className=\"nav\">\n          <ul>\n            <li>\n              <a href=\"/\">{currentAccount}</a>\n            </li>\n          </ul>\n        </nav>\n      </header>\n      <main>\n        {!isConnected && <Login onLogin={onLogin} onLogout={onLogout} />}\n        {isConnected && (\n          <Home currentAccount={currentAccount} currentNetwork={getCurrentNetwork(chainId)} />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1XrOF\",\"button\":\"Login_button__RYOWg\"};"],"sourceRoot":""}